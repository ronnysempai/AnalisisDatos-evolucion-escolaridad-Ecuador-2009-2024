# -*- coding: utf-8 -*-
"""analisis_datos_escolares_ecuador.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17NSynhvKD-CFvHjf1wvh2Qh_E_OgDb5j
"""

import pandas as pd
    import numpy as np
    import matplotlib.pyplot as plt
    from scipy.stats import linregress
    import seaborn as sns

df = pd.read_csv("registro.csv", delimiter=';')

"""**Eliminacion de Filas en Blanco**"""

df = df.dropna(how='all').reset_index(drop=True)



df.tail(20)

"""# **Limpiesa de Datos**

1. **Corregir el formato de la columna Anio_lectivo**

Actualmente, los valores son como "2009-2010 Inicio".
"""

# Extraer el año de inicio (primeros 4 caracteres)
df['anio'] = df['Anio_lectivo'].str[:4].astype(int)

"""Esto permite agrupar por año (2009, 2010, ..., 2025).

2. Verificar y corregir valores nulos o cero en **Total_Estudiantes**

En la muestra, hay instituciones con Total_Estudiantes = 0 o valores muy bajos (ej: 3 estudiantes).

Pregunta clave:  **¿Son datos reales o errores?**
"""

df = df[df['Total_Estudiantes'] > 0]

"""________________________________________________________________________________

3. **Validar consistencia en Area (Rural vs. Urbana)**

En la muestra, Area tiene valores como "Urbana" y "Rural"

**Verificar que no haya errores tipográficos:**
"""

print(df['Area'].unique())
# Salida esperada: ['Urbana', 'Rural']

"""Si hay valores extraños (ej: "URBANA", "rural"), estandarízalos:"""

df['Area'] = df['Area'].str.capitalize()  # 'Urbana', 'Rural'

"""4. **Verificar duplicados**"""

# Contar duplicados por institución y año
duplicados = df.duplicated(subset=['AMIE', 'anio'], keep=False)
print(f"Duplicados encontrados: {duplicados.sum()}")

df = df.drop_duplicates(subset=['AMIE', 'anio'], keep='last')

"""5. **Manejo de valores atípicos (outliers)**

En la muestra, hay instituciones con **más de 2,000 estudiantes** (ej: "LA ASUNCION" con 2,680).

**Esto no es un error:** son colegios grandes en zonas urbanas.

6. **Verificar consistencia en Provincia**

Asegurarse de que los nombres de provincias estén estandarizados (ej: "AZUAY" en mayúsculas).
"""

df['Provincia'] = df['Provincia'].str.upper()

"""**Preparación para la visualización**

Después de la limpieza, agrupa los datos para la visualización:
"""

# Por provincia
matricula_provincia = df.groupby(['anio', 'Provincia'])['Total_Estudiantes'].sum().reset_index()

# Por zona
matricula_zona = df.groupby(['anio', 'Area'])['Total_Estudiantes'].sum().reset_index()

"""Antes de graficar, verificamos que los datos tengan sentido:"""

# Verificar rango de años
print(f"Años: {df['anio'].min()} - {df['anio'].max()}")

# Verificar total de estudiantes por año
print(df.groupby('anio')['Total_Estudiantes'].sum().head())

########Visualizacion

# 1. Por zona
matricula_zona = df.groupby(['anio', 'Area'])['Total_Estudiantes'].sum().unstack()

plt.figure(figsize=(12, 6))
plt.plot(matricula_zona.index, matricula_zona['Rural'], label='Rural', marker='o')
plt.plot(matricula_zona.index, matricula_zona['Urbana'], label='Urbana', marker='o')
plt.title("Evolución de la matrícula escolar en Ecuador por zona (2009–2025)")
plt.xlabel("Año")
plt.ylabel("Total de estudiantes")
plt.legend(title="Zona")
plt.grid(True)
plt.tight_layout()
plt.show()

"""**Evolucion Matricula Escolar por Zona y Top 5 de Provincias**"""

# 2. Agrupar por año, provincia y zona
matricula = df.groupby(['anio', 'Provincia', 'Area'])['Total_Estudiantes'].sum().reset_index()

# 3. Seleccionar top 5 provincias por matrícula total
top_provincias = matricula.groupby('Provincia')['Total_Estudiantes'].sum().nlargest(5).index
df_top = matricula[matricula['Provincia'].isin(top_provincias)]

# 4. Separar zonas
df_rural = df_top[df_top['Area'] == 'Rural']
df_urbana = df_top[df_top['Area'] == 'Urbana']

top_provincias

matricula.head(20)

# 5. Crear subgráficos separados
fig, axes = plt.subplots(1, 2, figsize=(16, 6), sharey=True)

# Gráfico rural
sns.lineplot(
    data=df_rural,
    x='anio',
    y='Total_Estudiantes',
    hue='Provincia',
    marker='o',
    ax=axes[0]
)
axes[0].set_title("Matrícula escolar: Zona Rural")
axes[0].set_xlabel("Año")
axes[0].set_ylabel("Total de estudiantes")
axes[0].legend(title="Provincia")
axes[0].grid(True, linestyle='--', alpha=0.5)

# Gráfico urbano
sns.lineplot(
    data=df_urbana,
    x='anio',
    y='Total_Estudiantes',
    hue='Provincia',
    marker='o',
    ax=axes[1]
)
axes[1].set_title("Matrícula escolar: Zona Urbana")
axes[1].set_xlabel("Año")
axes[1].set_ylabel("")
axes[1].legend(title="Provincia")
axes[1].grid(True, linestyle='--', alpha=0.5)

"""**Evolución de Relacion Estudiantes/Docentes en Ecuador por zona (2009–2025):**"""

###
df['estudiantes_por_docente'] = df['Total_Estudiantes'] / df['Total_Docentes']

estudiantes_por_docente= df[df['Total_Docentes']>0]

estudiantes_por_docentes_area =estudiantes_por_docente.groupby(['anio', 'Area'])['estudiantes_por_docente'].sum().unstack()

estudiantes_por_docentes_area.info()

estudiantes_por_docentes_area

df_est_doc = estudiantes_por_docentes_area.groupby(['anio', 'Rural', 'Urbana']).size().reset_index()

df_est_doc['Rural'].to_numpy()

x = np.arange(len(df_est_doc['anio']))
width = 0.4

# Crear UNA SOLA figura, con el tamaño deseado
fig, ax = plt.subplots(figsize=(16, 8))  # ← Ajusta aquí el tamaño (ej: 16 de ancho)

rects1 = ax.bar(x - width/2, df_est_doc['Rural'].to_numpy(), width, label='Rural')
rects2 = ax.bar(x + width/2, df_est_doc['Urbana'].to_numpy(), width, label='Urbana')

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Estudiantes/Docentes')
ax.set_xlabel('Año')
ax.set_title('Estudiantes por zona (Rural vs. Urbana)')
ax.set_xticks(x)
ax.set_xticklabels(df_est_doc['anio'], rotation=45, ha='right')
ax.legend()

# Rotar etiquetas del eje X
plt.xticks(rotation=45, ha='right')

fig.tight_layout()

plt.show()

"""**Evolución de Relacion Estudiantes/Docentes en Ecuador por zona y Top 5 de Provincias (2009–2025):**

**Número de instituciones educativas por Top 5 de Provincias**

---
"""

instituciones = df.groupby(['anio', 'Provincia', 'Area'])['Nombre_Institucion'].count().reset_index()

instituciones

top_provincias_inst = instituciones.groupby('Provincia')['Nombre_Institucion'].sum().nlargest(5).index

df_top_provincias_inst = instituciones[instituciones['Provincia'].isin(top_provincias_inst)]

# 4. Separar zonas
df_rural_inst = df_top_provincias_inst[df_top_provincias_inst['Area'] == 'Rural']
df_urbana_inst = df_top_provincias_inst[df_top_provincias_inst['Area'] == 'Urbana']

df_top_provincias_inst

df_rural_inst

df_urbana_inst

fig, axes = plt.subplots(1, 2, figsize=(16, 6), sharey=True)

# Gráfico rural
sns.lineplot(
    data=df_rural_inst,
    x='anio',
    y='Nombre_Institucion',
    hue='Provincia',
    marker='o',
    ax=axes[0]
)
axes[0].set_title("Instituciones Escolares: Zona Rural")
axes[0].set_xlabel("Año")
axes[0].set_ylabel("Total Instituciones")
axes[0].legend(title="Provincia")
axes[0].grid(True, linestyle='--', alpha=0.5)

# Gráfico urbano
sns.lineplot(
    data=df_urbana_inst,
    x='anio',
    y='Nombre_Institucion',
    hue='Provincia',
    marker='o',
    ax=axes[1]
)
axes[1].set_title("Instituciones Escolares: Zona Urbana")
axes[1].set_xlabel("Año")
axes[1].set_ylabel("Total Instituciones")
axes[1].legend(title="Provincia")
axes[1].grid(True, linestyle='--', alpha=0.5)